{"version":3,"sources":["CSS/styles.module.css","components/ContactRow.js","components/ContactsBanner.js","components/CreateContact.js","components/FavoriteSection.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactRow","props","contact","name","phone","email","type","checked","favorite","onChange","toggleFavorite","className","styles","buttonEdit","onClick","edit","id","buttonDelete","delete","ContactsBanner","contactItems","CreateContact","initialValues","uuid","useState","data","setData","handleInputChange","e","contactEditing","target","value","setEdit","containerForm","onSubmit","preventDefault","callback","reset","form","htmlFor","placeholder","required","FavoriteSection","containerFavoriteSection","isChecked","Table","containerTable","function","App","favoriteValue","setContactItems","setfavorite","setContactEditing","map","c","deleteContact","contactName","removeContact","filter","swal","title","text","icon","buttons","then","respuesta","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","container","length","updatedContacts","contactPhone","contactEmail","find","t","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.410712ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3zGLV\",\"containerForm\":\"styles_containerForm__vnm31\",\"form\":\"styles_form__2KQW_\",\"containerTable\":\"styles_containerTable__1904V\",\"containerFavoriteSection\":\"styles_containerFavoriteSection__1qspN\",\"buttonEdit\":\"styles_buttonEdit__3WswW\",\"buttonDelete\":\"styles_buttonDelete__3AFHu\"};","import React from 'react';\r\nimport styles from '../CSS/styles.module.css';\r\n\r\n\r\nconst ContactRow = (props) => {\r\n    return(\r\n        <tr key={props.contact.name}>\r\n            <td>{props.contact.name}</td>\r\n            <td>{props.contact.phone}</td>\r\n            <td>{props.contact.email}</td>\r\n            <td>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    checked={props.contact.favorite} \r\n                    onChange={() => props.toggleFavorite(props.contact)}/>\r\n            </td>\r\n            <td>\r\n                <button className={styles.buttonEdit} \r\n                        onClick={()=> props.edit(props.contact.id)}>\r\n                            <i className=\"fas fa-user-edit\"></i>\r\n                </button>\r\n            </td>\r\n            <td>\r\n                <button className={styles.buttonDelete} \r\n                        onClick={() => props.delete(props.contact.name)}>\r\n                            <i className=\"far fa-trash-alt\"></i>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n       )\r\n}\r\n \r\nexport default ContactRow;","import React from 'react';\r\n\r\nconst ContactsBanner = (props) => {\r\n    return ( \r\n        <header>\r\n            <h2>Libreta de contactos</h2>\r\n            <h5>Total de contactos: {props.contactItems}</h5>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default ContactsBanner;","import React, {useState} from 'react';\r\nimport styles from '../CSS/styles.module.css'\r\nimport uuid from 'react-uuid'\r\n\r\nconst CreateContact = (props) => {\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        phone: '',\r\n        email: '', \r\n        id : uuid()\r\n    }\r\n\r\n    const [data, setData] = useState(initialValues)\r\n\r\n    const handleInputChange = (e) => {\r\n        if(props.contactEditing === null ){\r\n            setData({\r\n                ...data,\r\n                [e.target.name] : e.target.value\r\n            })\r\n        }else{\r\n            props.setEdit({\r\n                ...props.edit,\r\n                [e.target.name] : e.target.value\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n\r\n        const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            if(props.contactEditing === null ){\r\n                props.callback(data.name, data.phone, data.email, data.id)\r\n            }else{\r\n                props.callback(props.id)\r\n            }\r\n            e.target.reset()\r\n        }\r\n\r\n    return ( <div className= {styles.containerForm}>\r\n                <form onSubmit={handleSubmit} className= {styles.form}>\r\n                <label htmlFor=\"Favorite\">Nombre Completo</label>\r\n                    <input\r\n                    data-testid=\"filter-input-name\"\r\n                    id=\"name\" \r\n                    type=\"text\"\r\n                    onChange={handleInputChange}\r\n                     name= \"name\"\r\n                     placeholder=\"Ej. Juanito Perez\"\r\n                    required\r\n                />\r\n                <label htmlFor=\"Favorite\">Teléfono</label>\r\n                <input\r\n                data-testid=\"filter-input-phone\"\r\n                    id=\"phone\" \r\n                    type=\"tel\"\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Ej. 0000000\"\r\n                    name= \"phone\"\r\n                />\r\n                <label htmlFor=\"Favorite\">Correo electrónico</label>\r\n                <input\r\n                    data-testid=\"filter-input-email\"\r\n                    id=\"email\" \r\n                    type=\"email\"\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Ej. juanito@example.com\"\r\n                    name=\"email\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">{\r\n                props.contactEditing === null ?\r\n                \"Añadir nuevo contacto\" : \"editar\"}</button>\r\n                </form>\r\n            </div> );\r\n}\r\n \r\nexport default CreateContact;","import React from 'react';\r\nimport styles from '../CSS/styles.module.css';\r\n\r\nconst FavoriteSection = (props) => {\r\n    return ( \r\n    <div className={styles.containerFavoriteSection}>\r\n        <label htmlFor=\"Favorite\">Ver mis contactos favoritos</label>\r\n        <input\r\n        data-testid=\"favorite\"\r\n        type=\"checkbox\"\r\n        checked= {props.isChecked}\r\n        onChange= {e => props.callback(e.target.checked)}\r\n        />\r\n    </div> );\r\n}\r\n \r\nexport default FavoriteSection;","import React from 'react';\r\nimport styles from '../CSS/styles.module.css'\r\n\r\n\r\nconst Table = (props) => {\r\n    return (   \r\n    <table data-testid=\"my-table\" className= {styles.containerTable}>\r\n        <thead>\r\n        <tr>\r\n            <th>Nombre Completo</th>\r\n            <th>Teléfono</th>\r\n            <th>Correo electrónico</th>\r\n            <th>Favorito</th>\r\n            <th>Editar</th>\r\n            <th>Borrar</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.function}\r\n        </tbody>\r\n    </table>);\r\n}\r\n \r\nexport default Table;","import React, {useState, useEffect} from 'react';\r\nimport styles from './CSS/styles.module.css';\r\nimport ContactRow from './components/ContactRow';\r\nimport ContactsBanner from './components/ContactsBanner';\r\nimport CreateContact from './components/CreateContact';\r\nimport FavoriteSection from './components/FavoriteSection';\r\nimport Table from './components/Table';\r\nimport uuid from 'react-uuid';\r\nimport swal from 'sweetalert';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [contactItems, setContactItems] = useState([{\r\n    name: \"Julian Fonseca\",\r\n    phone: \"123456\",\r\n    email: \"juli@gmail.com\",\r\n    favorite: false,\r\n    id: uuid()\r\n  },{\r\n    name: \"Andres Sanchez\",\r\n    phone: \"987654\",\r\n    email: \"andres@gmail.com\",\r\n    favorite: true, \r\n    id: uuid()\r\n  }\r\n])\r\n\r\n// identifica si se ha marcado un elemento como favorito\r\nconst [favorite, setfavorite] = useState(false)\r\n\r\n//Almacena el valor del id del contacto actual para poder editarlo\r\nconst [contactEditing, setContactEditing] = useState(null);\r\n\r\n//Se establecen los valores que tendra el contacto tras un update\r\nconst initialValues =  {\r\n  name: '',\r\n  phone: '',\r\n  email: ''\r\n}\r\nconst [edit, setEdit] = useState(initialValues);\r\n\r\n\r\n// Funcion para crear un nuevo contacto \r\nconst createNewContact = (contactName, contactPhone, contactEmail) => {\r\n  if(!contactItems.find(t => t.phone === contactPhone)){\r\n    setContactItems([...contactItems, {\r\n      name: contactName, \r\n      phone: contactPhone,\r\n      email: contactEmail,\r\n      favorite: false, \r\n      id: uuid()\r\n    }])\r\n  }else{ \r\n    alert(\"El numero registrado ya existe en su libreta de contactos\")\r\n  }\r\n}\r\n\r\n// Funcion para actualizar un contacto\r\n  function submitEdits() {\r\n    let updatedContacts = [...contactItems]\r\n    updatedContacts.map((contact) => {\r\n      if (contact.id === contactEditing) {\r\n        contact.name = edit.name;\r\n        contact.phone = edit.phone;\r\n        contact.email = edit.email;\r\n      }\r\n      return contact\r\n    });\r\n    setContactItems(updatedContacts);\r\n    setContactEditing(null);\r\n    setEdit(initialValues)\r\n  }\r\n\r\n\r\n  \r\n// Funcion que marca un contacto como favorito\r\nconst toggleFavorite = (contact) => \r\nsetContactItems(contactItems.map(\r\n  c => (c.name === contact.name ? {...c,favorite: !c.favorite} : c)\r\n))\r\n\r\n// Funcion para borrar un contacto\r\nconst deleteContact = contactName => {\r\n  const removeContact = [...contactItems].filter(contact => contact.name !== contactName)\r\n  swal({\r\n    title: \"Se eliminará tu tarea\",\r\n    text: \"Quieres continuar?\",\r\n    icon: \"warning\",\r\n    buttons: [\"No\", \"Si\"]\r\n    }).then(respuesta => {\r\n    if(respuesta){\r\n         setContactItems(removeContact)\r\n  }\r\n})\r\n}\r\n\r\n// Se muestran los datos en pantalla \r\nconst contactTableRowsFavorite = (favoriteValue) => \r\n contactItems\r\n .filter(contact => contact.favorite === favoriteValue)\r\n .map(contact => (\r\n   <ContactRow\r\n   key= {contact.name}\r\n   contact = {contact}\r\n   toggleFavorite={toggleFavorite}\r\n   delete = {deleteContact}\r\n   edit ={setContactEditing}\r\n   />\r\n ))\r\n\r\n const contactTableRows = () => \r\n contactItems.map(contact => (\r\n   <ContactRow\r\n   key= {contact.name}\r\n   contact = {contact}\r\n   toggleFavorite={toggleFavorite}\r\n   delete = {deleteContact}\r\n   edit = {setContactEditing}\r\n   />\r\n ))\r\n\r\n\r\n// Se obtienen y almacenan los datos en el localstorage\r\n useEffect(()=> {\r\n   let data = localStorage.getItem(\"contacts\")\r\n   if(data != null){\r\n     setContactItems(JSON.parse(data))\r\n   }else{\r\n     setContactItems([\r\n      {\r\n        name: \"Julian Fonseca Example\",\r\n        phone: 0,\r\n        email: \"juli@gmail.com\",\r\n        favorite: false, \r\n        id:uuid()\r\n      },{\r\n        name: \"Andres Sanchez Example\",\r\n        phone: 1,\r\n        email: \"andres@gmail.com\",\r\n        favorite: true, \r\n        id: uuid()\r\n      }\r\n     ])\r\n     setfavorite(true)\r\n   }\r\n }, [])\r\n\r\n\r\n useEffect(() => {\r\n   localStorage.setItem('contacts', JSON.stringify(contactItems))\r\n }, [contactItems])\r\n\r\n\r\n  return (\r\n    <div className= {styles.container}>\r\n      <ContactsBanner contactItems= {contactItems.length}/>\r\n\r\n\r\n     {\r\n        contactEditing !== null ? (\r\n          <CreateContact\r\n                callback = {submitEdits}\r\n                contactEditing = {contactEditing}\r\n                setEdit = {setEdit}\r\n                edit = {edit}\r\n                />\r\n        ):(\r\n          \r\n          <CreateContact \r\n          callback = {createNewContact}\r\n          contactEditing = {contactEditing}\r\n          setEdit = {setEdit}\r\n          edit = {edit}\r\n        />\r\n        )\r\n      } \r\n\r\n      <Table function = {contactTableRows()}/>  \r\n      \r\n      <div>\r\n        <FavoriteSection\r\n        isChecked = {favorite}\r\n        callback = {checked => setfavorite(checked)}\r\n        />\r\n      </div>\r\n\r\n      {\r\n        favorite && (\r\n         <Table function = {contactTableRowsFavorite(true)}/>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}